name: Markdown to Scientific PDF

# This workflow is triggered whenever markdown files are modified in the main branch
on:
  push:
    branches:
      - main
    paths:
      - '**.md'
  # Allow manual trigger from the Actions tab
  workflow_dispatch:
    inputs:
      markdown_file:
        description: 'Path to the markdown file to convert'
        required: false
        default: ''

# Define permissions needed for the workflow
permissions:
  contents: read

jobs:
  convert-and-upload:
    name: Convert Markdown to PDF and Upload to S3
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the repository content
      - name: Checkout repository
        uses: actions/checkout@v3
        
      # Step 2: Set up Node.js for markdown processing
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      # Step 3: Install pandoc for markdown to PDF conversion
      - name: Install Pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc
        
      # Step 4: Install LaTeX for scientific PDF generation
      - name: Install LaTeX
        run: |
          sudo apt-get install -y texlive-xetex texlive-fonts-recommended texlive-fonts-extra texlive-latex-extra
      
      # Step 5: Find all markdown files (if not manually specified)
      - name: Find markdown files
        id: find-markdown
        run: |
          if [ -n "${{ github.event.inputs.markdown_file }}" ]; then
            echo "MARKDOWN_FILES=${{ github.event.inputs.markdown_file }}" >> $GITHUB_ENV
          else
            echo "MARKDOWN_FILES=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | tr '\n' ' ')" >> $GITHUB_ENV
          fi
      
      # Step 6: Convert markdown to scientific PDF using pandoc with LaTeX template
      - name: Convert Markdown to PDF
        run: |
          # Create a directory for the PDFs
          mkdir -p pdfs
          
          # Create a scientific paper LaTeX template
          cat > scientific-template.tex << 'EOL'
          \documentclass[12pt, letterpaper]{article}
          \usepackage[utf8]{inputenc}
          \usepackage{amsmath}
          \usepackage{amsfonts}
          \usepackage{amssymb}
          \usepackage{graphicx}
          \usepackage[colorlinks=true, allcolors=blue]{hyperref}
          \usepackage{natbib}
          \usepackage{booktabs}
          \usepackage{geometry}
          \geometry{margin=1in}
          \usepackage{fancyhdr}
          \pagestyle{fancy}
          \fancyhead{}
          \fancyfoot{}
          \fancyfoot[C]{\thepage}
          \renewcommand{\headrulewidth}{0pt}
          
          \title{$title$}
          \author{$author$}
          \date{$date$}
          
          \begin{document}
          
          \maketitle
          
          $body$
          
          \end{document}
          EOL
          
          # Process each markdown file
          for md_file in $MARKDOWN_FILES; do
            base_name=$(basename "$md_file" .md)
            output_pdf="pdfs/${base_name}.pdf"
            
            echo "Converting $md_file to $output_pdf"
            
            # Extract title from the markdown file (assuming first line is a # title)
            title=$(head -n 1 "$md_file" | sed 's/^# //')
            
            # Extract author if specified in metadata format
            author=$(grep -m 1 "^author:" "$md_file" | sed 's/^author: //' || echo "")
            
            # Convert using pandoc with the scientific template
            pandoc -s "$md_file" \
              --pdf-engine=xelatex \
              --template=scientific-template.tex \
              -V title="${title:-Untitled}" \
              -V author="${author:-}" \
              -V date="$(date +"%B %d, %Y")" \
              -o "$output_pdf"
          done
      
      # Step A: Configure AWS credentials
      # These credentials must be stored as secrets in your GitHub repository
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # Step B: Upload PDF to S3
      - name: Upload PDF to S3
        run: |
          # Create timestamp directory for versioning
          TIMESTAMP=$(date +"%Y-%m-%d-%H-%M-%S")
          
          # Upload all generated PDFs to S3
          for pdf_file in pdfs/*.pdf; do
            if [ -f "$pdf_file" ]; then
              filename=$(basename "$pdf_file")
              
              # Upload to a versioned directory structure
              aws s3 cp "$pdf_file" "s3://${{ secrets.S3_BUCKET }}/papers/$TIMESTAMP/$filename"
              
              # Also upload to latest directory (overwriting previous version)
              aws s3 cp "$pdf_file" "s3://${{ secrets.S3_BUCKET }}/papers/latest/$filename"
              
              echo "Uploaded $filename to S3 bucket ${{ secrets.S3_BUCKET }}"
            fi
          done
      
      # Step C: Generate and upload index file (optional)
      - name: Generate index of all PDFs
        run: |
          echo "# Available PDFs" > pdfs/index.md
          echo "" >> pdfs/index.md
          echo "Last updated: $(date)" >> pdfs/index.md
          echo "" >> pdfs/index.md
          
          for pdf_file in pdfs/*.pdf; do
            if [ -f "$pdf_file" ]; then
              filename=$(basename "$pdf_file")
              base_name="${filename%.pdf}"
              echo "* [$base_name](https://${{ secrets.S3_BUCKET }}.s3.amazonaws.com/papers/latest/$filename)" >> pdfs/index.md
            fi
          done
          
          # Convert index to HTML
          pandoc pdfs/index.md -o pdfs/index.html
          
          # Upload index to S3
          aws s3 cp pdfs/index.html "s3://${{ secrets.S3_BUCKET }}/papers/index.html" --content-type "text/html"

