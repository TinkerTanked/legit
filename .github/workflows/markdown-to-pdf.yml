name: Markdown to Multiple PDF Formats

# This workflow is triggered whenever markdown files are modified in the main branch
on:
  push:
    branches:
      - main
    paths:
      - 'content/**.md'
      - 'templates/**'
      - 'configs/**'
  # Allow manual trigger from the Actions tab
  workflow_dispatch:
    inputs:
      markdown_file:
        description: 'Path to the markdown file to convert (relative to content/ directory)'
        required: false
        default: ''
      regenerate_all:
        description: 'Regenerate all markdown files in content directory'
        type: boolean
        default: false

# Define permissions needed for the workflow
permissions:
  contents: read

jobs:
  convert-and-upload:
    name: Convert Markdown to PDF and Upload to S3
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [scientific, academic]
        include:
          - format: scientific
            template: templates/scientific-paper.tex
            output_dir: pdfs/scientific
          - format: academic
            template: templates/academic-paper.tex
            output_dir: pdfs/academic
    container:
      image: pandoc/latex:latest-ubuntu
      options: --user root
    
    steps:
      # Step 1: Check out the repository content
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Step 2: Read configuration
      - name: Read workflow configuration
        id: config
        run: |
          # Check if config file exists
          if [ -f "configs/workflow-config.yml" ]; then
            echo "Using configuration from configs/workflow-config.yml"
            
            # Parse configuration values using yq
            apt-get update
            apt-get install -y wget
            wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.30.8/yq_linux_amd64
            chmod +x /usr/local/bin/yq
            
            # Set environment variables from config
            echo "OUTPUT_DIR=$(yq '.output_directory.${{ matrix.format }} // "${{ matrix.output_dir }}"' configs/workflow-config.yml)" >> $GITHUB_ENV
            echo "TEMPLATE_FILE=$(yq '.template_file.${{ matrix.format }} // "${{ matrix.template }}"' configs/workflow-config.yml)" >> $GITHUB_ENV
            echo "DEFAULT_AUTHOR=$(yq '.default_author // ""' configs/workflow-config.yml)" >> $GITHUB_ENV
            echo "PDF_ENGINE=$(yq '.pdf_engine // "xelatex"' configs/workflow-config.yml)" >> $GITHUB_ENV
          else
            echo "No configuration file found. Using default settings."
            echo "OUTPUT_DIR=${{ matrix.output_dir }}" >> $GITHUB_ENV
            echo "TEMPLATE_FILE=${{ matrix.template }}" >> $GITHUB_ENV
            echo "DEFAULT_AUTHOR=" >> $GITHUB_ENV
            echo "PDF_ENGINE=xelatex" >> $GITHUB_ENV
          fi
          
      # Step 3: Set up Node.js for markdown processing (if needed)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      # Step 4: Install additional dependencies (if any)
      - name: Install additional dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            wget curl \
            fontconfig \
            ghostscript \
            imagemagick

          # Install LaTeX packages
          tlmgr update --self
          tlmgr install mathtools physics algorithms algorithmicx algorithm2e adjustbox collectbox xkeyval pdflscape threeparttable
          
      # Step 4b: Install Inkscape with minimal dependencies
      - name: Install Inkscape
        timeout-minutes: 10
        run: |
          echo "Installing Inkscape with minimal dependencies..."
          apt-get update
          apt-get install -y --no-install-recommends inkscape
          
          # Verify Inkscape installation
          if command -v inkscape &> /dev/null; then
            echo "Inkscape successfully installed: $(inkscape --version)"
          else
            echo "::warning::Inkscape installation failed, SVG to PDF conversion may not work"
            # Install a fallback converter
            apt-get install -y --no-install-recommends librsvg2-bin
            echo "Installed librsvg2-bin as fallback: $(rsvg-convert --version)"
          fi
          
      # Verify Pandoc and LaTeX are pre-installed
      - name: Verify pre-installed tools
        run: |
          echo "Pandoc version: $(pandoc --version | head -n 1)"
          echo "LaTeX version: $(pdflatex --version | head -n 1)"
          echo "XeLaTeX version: $(xelatex --version | head -n 1)"
      
      # Step 5: Prepare format-specific workspace to avoid collisions
      - name: Prepare format-specific workspace
        run: |
          echo "Creating format-specific working directory and Lua filter for ${{ matrix.format }} format"
          
          # Create format-specific working directory
          mkdir -p workdir-${{ matrix.format }}
          
          # Check if format-specific Lua filter already exists
          if [ -f "scripts/image-orientation-filter-${{ matrix.format }}.lua" ]; then
            echo "Using existing format-specific Lua filter for ${{ matrix.format }}"
          else
            echo "Creating format-specific Lua filter by copying the general one"
            cp scripts/image-orientation-filter.lua scripts/image-orientation-filter-${{ matrix.format }}.lua
          fi
          
          echo "Format-specific workspace prepared for ${{ matrix.format }} format"
      
      # Step 6: Find all markdown files (if not manually specified)
      - name: Find markdown files
        id: find-markdown
        run: |
          mkdir -p "${{ env.OUTPUT_DIR }}"
          
          if [ -n "${{ github.event.inputs.markdown_file }}" ]; then
            # Use manually specified file
            FILE_PATH="content/${{ github.event.inputs.markdown_file }}"
            if [[ "${{ github.event.inputs.markdown_file }}" == content/* ]]; then
              FILE_PATH="${{ github.event.inputs.markdown_file }}"
            fi
            if [ -f "$FILE_PATH" ]; then
              echo "MARKDOWN_FILES=$FILE_PATH" >> $GITHUB_ENV
            else
              echo "::error::Specified markdown file $FILE_PATH does not exist"
              exit 1
            fi
          elif [ "${{ github.event.inputs.regenerate_all }}" == "true" ]; then
            # Regenerate all markdown files in content directory
            echo "MARKDOWN_FILES=$(find content/ -name "*.md" | tr '\n' ' ')" >> $GITHUB_ENV
          else
            # Only process files that have changed in this push
            echo "MARKDOWN_FILES=$(find content/ -name "*.md" | tr '\n' ' ')" >> $GITHUB_ENV
          fi
          
          echo "Found markdown files: $MARKDOWN_FILES"
      
      # Step 7: Convert markdown to scientific PDF using the conversion script
      - name: Convert Markdown to PDF
        run: |
          # Check if conversion script exists, otherwise use integrated conversion
          if [ -f "scripts/convert-markdown.sh" ]; then
            echo "Using conversion script: scripts/convert-markdown.sh"
            chmod +x scripts/convert-markdown.sh
            
            # Run the conversion script for each markdown file
            for md_file in $MARKDOWN_FILES; do
              ./scripts/convert-markdown.sh \
                --input="$md_file" \
                --output-dir="${{ env.OUTPUT_DIR }}" \
                --template="${{ env.TEMPLATE_FILE }}" \
                --engine="${{ env.PDF_ENGINE }}" \
                --default-author="${{ env.DEFAULT_AUTHOR }}" \
                --format="${{ matrix.format }}"
            done
          else
            echo "No conversion script found. Using integrated conversion."
            # Create output directory
            mkdir -p "${{ env.OUTPUT_DIR }}"
            
            # Process each markdown file
            for md_file in $MARKDOWN_FILES; do
              base_name=$(basename "$md_file" .md)
              output_pdf="${{ env.OUTPUT_DIR }}/${base_name}.pdf"
              
              echo "Converting $md_file to $output_pdf"
              
              # Extract YAML frontmatter variables
              title=$(grep -m 1 "^title:" "$md_file" | sed 's/^title: *//' | sed 's/"//g' || head -n 1 "$md_file" | sed 's/^# //')
              author=$(grep -m 1 "^author:" "$md_file" | sed 's/^author: *//' | sed 's/"//g' || echo "${{ env.DEFAULT_AUTHOR }}")
              date=$(grep -m 1 "^date:" "$md_file" | sed 's/^date: *//' | sed 's/"//g' || date +"%B %d, %Y")
              
              # Fix for \tightlist undefined error - create the template definition if not already in template
              if [ -f "${{ env.TEMPLATE_FILE }}" ] && ! grep -q "\\newcommand{\\tightlist}" "${{ env.TEMPLATE_FILE }}"; then
                echo "\\newcommand{\\tightlist}{\\setlength{\\itemsep}{0pt}\\setlength{\\parskip}{0pt}}" >> "${{ env.TEMPLATE_FILE }}.temp"
                cat "${{ env.TEMPLATE_FILE }}" >> "${{ env.TEMPLATE_FILE }}.temp"
                mv "${{ env.TEMPLATE_FILE }}.temp" "${{ env.TEMPLATE_FILE }}"
              fi
              
              # Convert using pandoc with the template for current format (${{ matrix.format }})
              pandoc -s "$md_file" \
                --pdf-engine=${{ env.PDF_ENGINE }} \
                --template="${{ env.TEMPLATE_FILE }}" \
                -V title="${title:-Untitled}" \
                -V author="${author:-}" \
                -V date="${date}" \
                -V format="${{ matrix.format }}" \
                -V graphics=true \
                -V linkcolor=blue \
                -V geometry:margin=1in \
                --lua-filter=scripts/image-orientation-filter-${{ matrix.format }}.lua \
                -o "$output_pdf" || echo "::warning::Failed to convert $md_file"
            done
          fi
      
      # Step A: Configure AWS credentials
      # These credentials must be stored as secrets in your GitHub repository
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # Step B: Upload PDF to S3
      - name: Upload PDF to S3
        run: |
          # Create timestamp directory for versioning
          TIMESTAMP=$(date +"%Y-%m-%d-%H-%M-%S")
          
          # Upload all generated PDFs to S3
          for pdf_file in ${{ env.OUTPUT_DIR }}/*.pdf; do
            if [ -f "$pdf_file" ]; then
              filename=$(basename "$pdf_file")
              
              # Upload to a versioned directory structure with format subfolder
              aws s3 cp "$pdf_file" "s3://${{ secrets.S3_BUCKET }}/papers/$TIMESTAMP/${{ matrix.format }}/$filename"
              
              # Also upload to latest directory (overwriting previous version)
              aws s3 cp "$pdf_file" "s3://${{ secrets.S3_BUCKET }}/papers/latest/${{ matrix.format }}/$filename"
              
              echo "Uploaded $filename to S3 bucket ${{ secrets.S3_BUCKET }}"
            fi
          done
      
      # Step C: Generate and upload index file (optional)
      - name: Generate index of all PDFs
        if: matrix.format == 'scientific'  # Only generate index once
        run: |
          mkdir -p pdfs
          echo "# Available PDFs" > pdfs/index.md
          echo "" >> pdfs/index.md
          echo "Last updated: $(date)" >> pdfs/index.md
          echo "" >> pdfs/index.md
          
          echo "## Scientific Format" >> pdfs/index.md
          echo "" >> pdfs/index.md
          for pdf_file in pdfs/scientific/*.pdf; do
            if [ -f "$pdf_file" ]; then
              filename=$(basename "$pdf_file")
              base_name="${filename%.pdf}"
              echo "* [$base_name](https://${{ secrets.S3_BUCKET }}.s3.amazonaws.com/papers/latest/scientific/$filename)" >> pdfs/index.md
            fi
          done
          
          echo "" >> pdfs/index.md
          echo "## Academic Format" >> pdfs/index.md
          echo "" >> pdfs/index.md
          for pdf_file in pdfs/academic/*.pdf; do
            if [ -f "$pdf_file" ]; then
              filename=$(basename "$pdf_file")
              base_name="${filename%.pdf}"
              echo "* [$base_name](https://${{ secrets.S3_BUCKET }}.s3.amazonaws.com/papers/latest/academic/$filename)" >> pdfs/index.md
            fi
          done
          
          # Convert index to HTML
          pandoc pdfs/index.md -o pdfs/index.html
          
          # Upload index to S3
          aws s3 cp pdfs/index.html "s3://${{ secrets.S3_BUCKET }}/papers/index.html" --content-type "text/html"
          
          # Create a simple JSON file with metadata about available formats
          cat > pdfs/formats.json << EOF
          {
            "available_formats": ["scientific", "academic"],
            "last_updated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
          
          aws s3 cp pdfs/formats.json "s3://${{ secrets.S3_BUCKET }}/papers/formats.json" --content-type "application/json"

